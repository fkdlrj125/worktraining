<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="recruit">
    
    <resultMap type="com.spring.recruit.vo.RecruitVo" id="recruitVo">
    	<result property="recSeq" 	column="SEQ"/>
    	<result property="recName" 	column="NAME"/>
    	<result property="recBirth" 	column="BIRTH"/>
    	<result property="recGender" 	column="GENDER"/>
    	<result property="recPhone" 	column="PHONE"/>
    	<result property="recEmail" 	column="EMAIL"/>
    	<result property="recAddr" 	column="ADDR"/>
    	<result property="recLoc" 	column="LOCATION"/>
    	<result property="recWt" 	column="WORK_TYPE"/>
    	<result property="recSubmit" 	column="SUBMIT"/>
    </resultMap>
    
    <resultMap type="com.spring.recruit.vo.EduVo" id="eduVo">
    	<result property="eduSeq" 	column="EDU_SEQ"/>
    	<result property="recSeq" 	column="SEQ"/>
    	<result property="eduSchool" 	column="SCHOOL_NAME"/>
    	<result property="eduDiv" 	column="DIVISION"/>
    	<result property="eduStart" 	column="START_PERIOD"/>
    	<result property="eduEnd" 	column="END_PERIOD"/>
    	<result property="eduMajor" 	column="MAJOR"/>
    	<result property="eduGrade" 	column="GRADE"/>
    	<result property="eduLoc" 	column="LOCATION"/>
    </resultMap>
    
    <resultMap type="com.spring.recruit.vo.CertVo" id="certVo">
    	<result property="certSeq" 	column="CERT_SEQ"/>
    	<result property="recSeq" 	column="SEQ"/>
    	<result property="certQualifi" 	column="QUALIFI_NAME"/>
    	<result property="certAcqu" 	column="ACQU_DATE"/>
    	<result property="certOrganize" 	column="ORGANIZE_NAME"/>
    </resultMap>
    
    <resultMap type="com.spring.recruit.vo.CareerVo" id="careerVo">
    	<result property="carSeq" 	column="CAR_SEQ"/>
    	<result property="recSeq" 	column="SEQ"/>
    	<result property="carCompany" 	column="COMP_NAME"/>
    	<result property="carLoc" 	column="LOCATION"/>
    	<result property="carStart" 	column="START_PERIOD"/>
    	<result property="carEnd" 	column="END_PERIOD"/>
    	<result property="carTask" 	column="TASK"/>
    	<result property="carSalary" 	column="SALARY"/>
    </resultMap>
    
    <resultMap type="com.spring.recruit.vo.UserInfoVo" id="userInfoVo">
    	<result property="school" column="school"/>
    	<result property="division" column="division"/>
    	<result property="carPeriod" column="car_period"/>
    	<result property="workLoc" column="work_loc"/>
    	<result property="workType" column="work_type"/>
    </resultMap>
    
    <!-- 
    	myBatis에서 null을 넣을 땐 타입을 지정해줘야 함
    	-> JDBC driver에서 타입 입력을 요구하는 메소드 때문
    	참조 : https://velog.io/@dailylifecoding/mybatis-null-parameter-and-jdbc-type-for-null-configuration
     -->
    <insert id="insertRecruit" parameterType="com.spring.recruit.vo.RecruitVo">
    <selectKey order="BEFORE" keyProperty="recSeq" resultType="string">
    	SELECT CAST(RECRUIT_SEQ.NEXTVAL AS VARCHAR2(255)) FROM DUAL
    </selectKey>
    	INSERT INTO
    		RECRUIT(
    			SEQ
				,NAME
				,BIRTH
				,GENDER
				,PHONE
				,EMAIL
				,ADDR
				,LOCATION
				,WORK_TYPE
				,SUBMIT
    		)
    	VALUES
    		(
    			#{recSeq, jdbcType=VARCHAR}
    			,#{recName, jdbcType=VARCHAR}
    			,#{recBirth, jdbcType=VARCHAR}
    			,#{recGender, jdbcType=VARCHAR}
    			,#{recPhone, jdbcType=VARCHAR}
    			,#{recEmail, jdbcType=VARCHAR}
    			,#{recAddr, jdbcType=VARCHAR}
    			,#{recLoc, jdbcType=VARCHAR}
    			,#{recWt, jdbcType=VARCHAR}
				,#{recSubmit, jdbcType=VARCHAR}
    		)
    </insert>
    
    <update id="updateRec" parameterType="com.spring.recruit.vo.RecruitVo">
   	 	UPDATE 
   	 		RECRUIT 
   	 	SET
			NAME = #{recName, jdbcType=VARCHAR}
			,BIRTH = #{recBirth, jdbcType=VARCHAR}
			,GENDER = #{recGender, jdbcType=VARCHAR}
			,PHONE = #{recPhone, jdbcType=VARCHAR}
			,EMAIL = #{recEmail, jdbcType=VARCHAR}
			,ADDR = #{recAddr, jdbcType=VARCHAR}
			,LOCATION = #{recLoc, jdbcType=VARCHAR}
			,WORK_TYPE = #{recWt, jdbcType=VARCHAR}
			,SUBMIT = #{recSubmit, jdbcType=VARCHAR}
	    WHERE
	     	SEQ = #{recSeq, jdbcType=VARCHAR}
    </update>

    <update id="mergeEdu" parameterType="java.util.List">
    <selectKey order="BEFORE" keyProperty="eduSeq" resultType="string">
    	SELECT CAST(EDU_SEQ.NEXTVAL AS VARCHAR2(255)) FROM DUAL
    </selectKey>
    	MERGE INTO 
    		EDUCATION edu
    	USING (
    		<foreach collection="list" item="item" separator="UNION">
    			SELECT
    				#{item.eduSeq, jdbcType=VARCHAR} as eduSeq
    				,#{item.recSeq, jdbcType=VARCHAR} as recSeq
    				,#{item.eduSchool, jdbcType=VARCHAR} as eduSchool
    				,#{item.eduDiv, jdbcType=VARCHAR} as eduDiv
    				,#{item.eduLoc, jdbcType=VARCHAR} as eduLoc
    				,#{item.eduStart, jdbcType=VARCHAR} as eduStart
    				,#{item.eduEnd, jdbcType=VARCHAR} as eduEnd
    				,#{item.eduMajor, jdbcType=VARCHAR} as eduMajor
    				,#{item.eduGrade, jdbcType=VARCHAR} as eduGrade
    			FROM
		    		DUAL
    		</foreach>
   		) du
   		ON
   			(edu.EDU_SEQ = du.eduSeq AND edu.SEQ = du.recSeq)
   			
		WHEN MATCHED THEN 
			UPDATE 
 			SET
				edu.SCHOOL_NAME = du.eduSchool
				,edu.DIVISION = du.eduDiv
				,edu.START_PERIOD = du.eduStart
				,edu.END_PERIOD = du.eduEnd
				,edu.MAJOR = du.eduMajor
				,edu.GRADE = du.eduGrade
				,edu.LOCATION = du.eduLoc
				
    	WHEN NOT MATCHED THEN
	    	INSERT (
	    			EDU_SEQ
					,SEQ
					,SCHOOL_NAME
					,DIVISION
					,START_PERIOD
					,END_PERIOD
					,MAJOR
					,GRADE
					,LOCATION
	    		)
	    		VALUES(
	    			#{eduSeq}
	    			,du.recSeq
	    			,du.eduSchool
					,du.eduDiv
					,du.eduStart
					,du.eduEnd
					,du.eduMajor
					,du.eduGrade
					,du.eduLoc
	    		)
    </update>
    
    <update id="mergeCar" parameterType="java.util.List">
    <selectKey keyProperty="carSeq" resultType="String" order="BEFORE">
    	SELECT CAST(CAREER_SEQ.NEXTVAL AS VARCHAR2(255)) FROM DUAL
    </selectKey>
    	MERGE INTO 
    		CAREER car
    	USING (
    		<foreach collection="list" item="item" separator="UNION">
	    		SELECT 
	    			#{item.carSeq, jdbcType=VARCHAR} as carSeq
	    			,#{item.recSeq, jdbcType=VARCHAR} as recSeq
	    			,#{item.carCompany, jdbcType=VARCHAR} as carCompany
	    			,#{item.carLoc, jdbcType=VARCHAR} as carLoc
	    			,#{item.carStart, jdbcType=VARCHAR} as carStart
	    			,#{item.carEnd, jdbcType=VARCHAR} as carEnd
	    			,#{item.carTask, jdbcType=VARCHAR} as carTask
	    			,#{item.carSalary, jdbcType=VARCHAR} as carSalary
	    		FROM DUAL
    		</foreach>
   		) du
   		ON
   			(car.CAR_SEQ = du.carSeq AND car.SEQ = du.recSeq)
   			
		WHEN MATCHED THEN 
			UPDATE 
 			SET
				car.COMP_NAME = du.carCompany
				,car.LOCATION = du.carLoc
				,car.START_PERIOD = du.carStart
				,car.END_PERIOD = du.carEnd
				,car.TASK = du.carTask
				,car.SALARY = du.carSalary
				
    	WHEN NOT MATCHED THEN
	    	INSERT (
	    			CAR_SEQ
					,SEQ
					,COMP_NAME
					,LOCATION
					,START_PERIOD
					,END_PERIOD
					,TASK
					,SALARY
	    		)
	    		VALUES(
	    			#{carSeq}
	    			,du.recSeq
					,du.carCompany
	    			,du.carLoc
					,du.carStart
					,du.carEnd
					,du.carTask
					,du.carSalary
	    		)
    </update>
    
    <update id="mergeCert" parameterType="java.util.List">
    <selectKey order="BEFORE" keyProperty="certSeq" resultType="string">
    	SELECT CAST(CERT_SEQ.NEXTVAL AS VARCHAR2(255)) FROM DUAL
    </selectKey>
    	MERGE INTO 
    		CERTIFICATE cert
    	USING (
    		<foreach collection="list" item="item" separator="UNION">
    			SELECT
    				#{item.certSeq, jdbcType=VARCHAR} as certSeq
    				,#{item.recSeq, jdbcType=VARCHAR} as recSeq
    				,#{item.certQualifi, jdbcType=VARCHAR} as certQualifi
    				,#{item.certAcqu, jdbcType=VARCHAR} as certAcqu
    				,#{item.certOrganize, jdbcType=VARCHAR} as certOrganize
    			FROM
		    		DUAL
    		</foreach>
   		) du
   		ON
   			(cert.CERT_SEQ = du.certSeq AND cert.SEQ = du.recSeq)
   			
		WHEN MATCHED THEN 
			UPDATE 
 			SET
				cert.QUALIFI_NAME = du.certQualifi
				,cert.ACQU_DATE = du.certAcqu
				,cert.ORGANIZE_NAME = du.certOrganize
				
    	WHEN NOT MATCHED THEN
	    	INSERT (
	    			CERT_SEQ
					,SEQ
					,QUALIFI_NAME
					,ACQU_DATE
					,ORGANIZE_NAME
	    		)
	    		VALUES(
	    			#{certSeq}
	    			,du.recSeq
	    			,du.certQualifi
					,du.certAcqu
					,du.certOrganize
	    		)
    </update>
    
    <delete id="deleteEdu" parameterType="java.util.List">
    	DELETE
    		EDUCATION
    	WHERE 
    <foreach collection="list" item="item" separator="OR">
    		EDU_SEQ = #{item.eduSeq, jdbcType=VARCHAR} AND SEQ = #{item.recSeq, jdbcType=VARCHAR}
   	</foreach>
    </delete>
    
    <delete id="deleteCareer" parameterType="java.util.List">
    	DELETE
    		Career
    	WHERE 
    <foreach collection="list" item="item" separator="OR">
    		CAR_SEQ = #{item.carSeq, jdbcType=VARCHAR} AND SEQ = #{item.recSeq, jdbcType=VARCHAR}
   	</foreach>
    </delete>
    
    <delete id="deleteCert" parameterType="java.util.List">
    	DELETE
    		CERTIFICATE
    	WHERE 
    <foreach collection="list" item="item" separator="OR">
    		CERT_SEQ = #{item.certSeq, jdbcType=VARCHAR} AND SEQ = #{item.recSeq, jdbcType=VARCHAR}
   	</foreach>
    </delete>
    
    <select id="selectRecruit" parameterType="com.spring.recruit.vo.RecruitVo" resultMap="recruitVo">
    	SELECT 
    		*
    	FROM
    		RECRUIT
    	WHERE 
    		NAME = #{recName, jdbcType=VARCHAR} AND PHONE = #{recPhone, jdbcType=VARCHAR}
    </select>
    
    <select id="selectEdu" parameterType="com.spring.recruit.vo.EduVo" resultMap="eduVo">
    	SELECT 
    		*
    	FROM
    		EDUCATION
    	WHERE 
    		SEQ = #{recSeq, jdbcType=VARCHAR}
    </select>
    
    <select id="selectCareer" parameterType="com.spring.recruit.vo.CareerVo" resultMap="careerVo">
    	SELECT 
    		*
    	FROM
    		CAREER
    	WHERE 
    		SEQ = #{recSeq, jdbcType=VARCHAR}
    </select>
    
    <select id="selectCert" parameterType="com.spring.recruit.vo.CertVo" resultMap="certVo">
    	SELECT 
    		*
    	FROM
    		CERTIFICATE
    	WHERE 
    		SEQ = #{recSeq, jdbcType=VARCHAR}
    </select>
    
    <select id="selectUserInfo" parameterType="com.spring.recruit.vo.RecruitVo" resultMap="userInfoVo">
    	SELECT 
    		e.SCHOOL_NAME school
    		,e.DIVISION division
    		,
    		(
	            SELECT 
	                SUM(MONTHS_BETWEEN(TO_DATE(END_PERIOD,'YYYY.MM'), TO_DATE(START_PERIOD, 'YYYY.MM'))) car_period
	            FROM 
	                CAREER
	            WHERE
	               SEQ = 22
            ) car_period
    		,r.LOCATION work_loc
    		,r.WORK_TYPE work_type
    	FROM
    		RECRUIT r
    		,(
   			    SELECT 
			        SCHOOL_NAME
			        ,DIVISION
			        ,SEQ
			        ,ROW_NUMBER() OVER(ORDER BY TO_DATE(START_PERIOD, 'YYYY.MM') DESC) period
			    FROM 
			        EDUCATION
    		) e
    	WHERE
    		e.SEQ = 22 AND r.SEQ = 22 AND e.period = 1
    </select>
</mapper>
